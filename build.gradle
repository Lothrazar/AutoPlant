plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = "${mc_version}-${mod_version}"
group = 'com.lothrazar.autoplant' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'autoplant'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

import net.minecraftforge.gradle.common.tasks.SignJar

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    
 mappings channel: 'official', version: '1.19'
  

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            
// some IDE's can get the Program arguments here  --mixin mixins.myplugin.json
          //  args "--mixin mixins.myplugin.json"
		 //   property 'mixin', 'mixins.myplugin.json'
			
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                autoplant {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                autoplant {
                    source sourceSets.main
                }
            }
        }

    }
}



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
 
    //implementation fg.deobf("mezz.jei:${jei_version}")
  //  implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
  //  compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
  //  runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")


 //   implementation fg.deobf("curse.maven:crafttweaker-239197:3183630")
 //   implementation fg.deobf("curse.maven:jeitweaker-368718:3188099")
//    implementation fg.deobf("curse.maven:cucumber-272335:3187116")
 //   implementation fg.deobf("curse.maven:mystical-agriculture-246640:3152061")
  //  implementation fg.deobf("curse.maven:simple-storage-network-268495:3163007")
   // implementation fg.deobf("curse.maven:cyclic-239286:3188762")
 //   implementation fg.deobf("curse.maven:ctm-267602:3137659")
 //   implementation fg.deobf("curse.maven:refined-storage-243076:3157354")
  //  implementation fg.deobf("curse.maven:storage-drawers-223852:3180569")
    
    
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    
}

repositories {
  maven {
    name = "mappings"
    url = 'https://dogforce-games.com/maven'
  }
  maven {
    // location of the maven that hosts JEI files
    name = "Progwml6 maven"
    url = 'https://dvs1.progwml6.com/files/maven/'
  }
  maven {
  	name = "curios"
    url = 'https://maven.theillusivec4.top/'
  }
  maven { url = 'https://maven.blamejared.com' }    
  maven { url = 'https://www.cursemaven.com'  }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "autoplant",
            "Specification-Vendor": "autoplantsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"autoplantsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing

//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}



task signJar(type: SignJar, dependsOn: jar) {

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
task copyJar(type: Copy) {
    from jar
    into "${dist_folder}"
}

task cleanJar {
  delete 'build/libs'
}
